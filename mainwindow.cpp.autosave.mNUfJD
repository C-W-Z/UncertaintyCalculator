#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QtMath>
#include <QVector>
#include <QString>
#include <QDebug>
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    f = new Frame;
}

MainWindow::~MainWindow()
{
    delete ui;
}

int showD = 2;
bool Scientific = false;
double average = 0;
double MStandard_Deviation = 0;
double Standard_Deviation = 0;
double Type_A_uncertainty = 0;
double Type_B_uncertainty = 0;
double Type_C_uncertainty = 0;
QString content;
QString minValue;
QStringList list;

QString ChangeType(double data)
{
    QString first, last;
    int n = 0;
    if(Scientific)
    {
        while(abs(data) > 10)
        {
            data /= 10;
            n++;
        }
        while(abs(data) < 1 && data != 0)
        {
            data *= 10;
            n--;
        }
        first = QString::number(data, 'd', showD);
        if(n != 0)
        {
            last = QString::number(n, 'd', 0);
            first.append("x10^("+last+")");
        }
        return first;
    }
    else
    {
        first = QString::number(data, 'd', showD);
        return first;
    }
}

void MainWindow::on_EnterButton_clicked()
{
    ui->calculateResult->setPlainText("");

    content = ui->inputTextEdit->toPlainText();
    minValue = ui->minimumValue->text();
    list = content.split(QRegExp("[\r\n]"),Qt::SkipEmptyParts);

    QVector<double> data(list.count());
    bool needRecalculate = false;
    average = 0;
    MStandard_Deviation = 0;
    Standard_Deviation = 0;
    Type_A_uncertainty = 0;
    Type_B_uncertainty = minValue.toDouble() / (2 * qSqrt(3));
    Type_C_uncertainty = 0;
    QString str[10];

    for(int i=0;i<data.size();i++)
    {
        data[i] = list[i].toDouble();
        average += data[i];
    }
    average /= data.size();

    str[0] = ChangeType(average);
    ui->calculateResult->append("算數平均數："+str[0]);
    
    for(int i=0;i<data.size();i++)
    {
        MStandard_Deviation += pow(data.at(i) - average, 2);
    }
    Standard_Deviation = MStandard_Deviation / (data.size() - 1);
    MStandard_Deviation /= data.size();
    Standard_Deviation = qSqrt(Standard_Deviation);
    MStandard_Deviation = qSqrt(MStandard_Deviation);

    str[1] = ChangeType(MStandard_Deviation);
    str[2] = ChangeType(Standard_Deviation);
    ui->calculateResult->append("母體標準偏差："+str[1]+"\n(樣本)標準偏差："+str[2]);

    double min = average - 3 * Standard_Deviation;
    double max = average + 3 * Standard_Deviation;

    str[7] = ChangeType(min);
    str[8] = ChangeType(max);
    ui->calculateResult->append("合理數據範圍："+str[7]+"~"+str[8]);

    for(double d : data)
    {
    	if(d > max || d < min)
    	{
            str[9] = QString::number(d, 'd', showD);
            ui->calculateResult->append("去除數據："+str[9]);
    		data.removeOne(d);
    		needRecalculate = true;
		}
	}
	
	if(needRecalculate)
	{
        ui->calculateResult->append("重新計算中...");
        
		average = 0;
		MStandard_Deviation = 0;
    	Standard_Deviation = 0;
    	for(int i=0;i<data.size();i++)
	    {
	        average += data[i];
	    }
    	average /= data.size();

        str[0] = ChangeType(average);
        ui->calculateResult->append("算數平均數：" + str[0]);
	    
	    for(int i=0;i<data.size();i++)
	    {
	        MStandard_Deviation += pow(data.at(i) - average, 2);
	    }
	    Standard_Deviation = MStandard_Deviation / (data.size() - 1);
	    MStandard_Deviation /= data.size();
	    Standard_Deviation = qSqrt(Standard_Deviation);
	    MStandard_Deviation = qSqrt(MStandard_Deviation);

        str[1] = ChangeType(MStandard_Deviation);
        str[2] = ChangeType(Standard_Deviation);
        ui->calculateResult->append("母體標準偏差："+str[1]+"\n(樣本)標準偏差："+str[2]);
	}
    
    Type_A_uncertainty = Standard_Deviation / qSqrt(data.size());
    Type_C_uncertainty = qSqrt(pow(Type_A_uncertainty, 2) + pow(Type_B_uncertainty, 2));

    str[3] = ChangeType(Type_A_uncertainty);
    str[4] = ChangeType(Type_B_uncertainty);
    str[5] = ChangeType(Type_C_uncertainty);
    ui->calculateResult->append("(A類)隨機不確定度："+str[3]+"\n(B類)系統不確定度："+str[4]+"\n(C類)組合不確定度："+str[5]);

    str[6] = ChangeType((Type_C_uncertainty / abs(average))*100);//%
    ui->calculateResult->append("最終計算結果："+str[0]+" ± "+str[5]+"\n不確定度百分比："+str[0]+"(1 ± "+str[6]+"%)");

    data.clear();
}

void MainWindow::on_spinBox_valueChanged(int arg1)
{
    showD = arg1;
}

void MainWindow::on_action_triggered()
{
    f->resize(264,320);
    f->setMinimumSize(264, 320);
    f->setMaximumSize(720, 840);
    f->setWindowTitle("關於");
    f->setWindowIcon(QIcon(":/icon_256x256.ico"));
    f->show();
}

void MainWindow::on_Scientific_notation_stateChanged(int state)
{
    if(state == 2)
    {
        Scientific = true;
    }
    else if(state == 0)
    {
        Scientific = false;
    }
}
